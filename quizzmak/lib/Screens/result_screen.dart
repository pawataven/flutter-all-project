import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:flutter/material.dart';
import 'package:lottie/lottie.dart';
import 'package:quizzmak/Screens/nav_bar_crategory_selection.dart';
import 'package:quizzmak/Widgets/my_button.dart';

class ResultScreen extends StatelessWidget {
  final int score;
  final int totalQuestion;

  const ResultScreen({
    super.key,
    required this.score, //‡πÄ‡∏Å‡πá‡∏ö‡∏Ñ‡∏∞‡πÄ‡πÄ‡∏ô‡∏ô
    required this.totalQuestion, //‡πÄ‡∏Å‡πá‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
  });

  // ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏Ñ‡∏∞‡πÄ‡πÄ‡∏ô‡∏ô
  Future<void> updateUserScore() async {
    User? user = FirebaseAuth.instance.currentUser; //‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ‡∏à‡∏≤‡∏Å firebase
    if (user == null) return; //‡∏ñ‡πâ‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏•‡πâ‡∏≠‡∏Ñ‡∏≠‡∏¥‡∏ô‡∏à‡∏∞‡πÑ‡∏°‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ü‡∏±‡∏á‡∏ä‡∏±‡πà‡∏ô‡∏ô‡∏µ‡πâ
    try {
      DocumentReference userRef =
          FirebaseFirestore.instance.collection("userData").doc(user.uid); //‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡∏Ç‡∏≠‡∏á userData ‡πÉ‡∏ô firebase

      await FirebaseFirestore.instance.runTransaction((transaction) async {
        DocumentSnapshot snapshot = await transaction.get(userRef); //‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Firestore

        int existingScore = snapshot['score'] ?? 0; //‡∏î‡∏∂‡∏á‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏à‡∏≤‡∏Å Firestore ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏à‡∏∞‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÄ‡∏õ‡πá‡∏ô 0 ‡πÉ‡∏ô database
        transaction.update(userRef, {'score': existingScore + score}); //‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ‡πÇ‡∏î‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÉ‡∏´‡∏°‡πà (score) ‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡πÉ‡∏ô‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÄ‡∏î‡∏¥‡∏° (existingScore) 
      });
    } catch (e) {
      print(e.toString());
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: Color(0xFFF2F9FF),
      appBar: AppBar(
      backgroundColor: Color(0xFFF194C3), toolbarHeight: 80,
        title: const Text("‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ó‡πå‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì"),
        automaticallyImplyLeading: false,
        centerTitle: true,
      ),
      body: Center(
        child: Padding(
          padding: const EdgeInsets.all(15),
          child: Column(
            mainAxisAlignment: MainAxisAlignment.start,
            children: [
               Stack(
                children: [
                  Lottie.network(
                    "https://lottie.host/b9aa275c-f01b-4fa1-9960-d9967ff18181/ZiMEqZ9vbD.json",
                    width: 300,
                    height: 200,
                    fit: BoxFit.cover,
                  ),
                  Lottie.network(
                    "https://lottie.host/8d738e81-9792-4ef9-ae3e-753276be3a55/lntTULi0mQ.json",
                    width: 300,
                    height: 200,
                    fit: BoxFit.cover,
                  ),
                ],
              ),
              const SizedBox(height: 100),
              const Text(
                "‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô! ‡∏ú‡∏•‡πÄ‡∏õ‡πá‡∏ô‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÑ‡∏£‡∏ö‡πâ‡∏≤‡∏á üòÇ",
                style: TextStyle(
                  color: Colors.blueAccent,
                  fontSize: 20,
                  fontWeight: FontWeight.bold,
                ),
              ),
              const SizedBox(height: 20),
              Text(
                "‡πÄ‡πÄ‡∏ï‡πâ‡∏°‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì $score ‡πÉ‡∏ô $totalQuestion ‡∏Ñ‡∏∞‡πÄ‡πÄ‡∏ô‡∏ô",
                style: const TextStyle(
                  fontSize: 22,
                ),
              ),
              // calculate the percentage
              Text(
                "‡∏ï‡∏≠‡∏ö‡∏ñ‡∏π‡∏Å‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢ ${(score / totalQuestion * 100).toStringAsFixed(2)}%",
                style: const TextStyle(fontSize: 22),
              ),
              const SizedBox(height: 30),
              Row(
                children: [
                  Expanded(
                    child: MyButton(
                        onTap: () {
                          Navigator.pushAndRemoveUntil(
                            context,
                            MaterialPageRoute(
                              builder: (context) =>
                                  const NavBarCrategorySelection(),
                            ),
                            (route) => false,
                          );
                        },
                        buttontext: "‡∏Å‡∏•‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å"),
                  ),
                  const SizedBox(width: 10),
                  Expanded(
                    child: MyButton(
                        onTap: () {
                          Navigator.pushAndRemoveUntil(
                            context,
                            MaterialPageRoute(
                              builder: (context) =>
                                  const NavBarCrategorySelection(
                                initalIndex: 1,
                              ),
                            ),
                            (route) => false,
                          );
                        },
                        buttontext: "‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì"),
                  ),
                ],
              )
            ],
          ),
        ),
      ),
    );
  }
}
